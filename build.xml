<project name="Salesforce GBM" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties" prefix="propfile"/>
    <available file="build.properties" property="isFileAvail" />
    <fail unless="isFileAvail" message="The build.properties file does not exist" />

    <property environment="sfenv"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="lib/ant-salesforce.jar" />        	
        </classpath>
    </taskdef>

    <target name="-initProps">
      <property file="${propfilename}.properties" prefix="personalPropsFile"/>
      <available file="${propfilename}.properties" property="isPersonalFileAvail" />
      <fail unless="isPersonalFileAvail" message="Your ${propfilename}.properties file does not exist" />
    </target>

    <!-- It's a utility for developing purposes -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieve" depends="-initProps">
        <mkdir dir="src"/>
        <!-- Retrieve the contents into another directory -->
        <echo message="Retrieving using usr=${personalPropsFile.sf.username} svrurl=${propfile.test.sf.serverurl}"/>
        <sf:retrieve username="${personalPropsFile.sf.username}" 
          password="${personalPropsFile.sf.password}" 
          serverurl="${propfile.test.sf.serverurl}" 
          retrieveTarget="src" unpackaged="retrieveSource/package.xml"/>
    </target>

    <!-- It's a utility for developing purposes -->
    <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve" depends="-initProps">
      <mkdir dir="bulkRetrieve"/>
      <sf:bulkRetrieve username="${personalPropsFile.sf.username}" 
        password="${personalPropsFile.sf.password}" 
        serverurl="${personalPropsFile.sf.serverurl}" 
        metadataType="${personalPropsFile.sf.metadataType}" 
        retrieveTarget="bulkRetrieve"/>
    </target>    

    <!-- It's a utility for developing purposes -->
    <!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata" depends="-initProps">
      <mkdir dir="describeMetadata"/>
      <sf:describeMetadata username="${personalPropsFile.sf.username}" 
        password="${personalPropsFile.sf.username}" 
        serverurl="${propfile.sf.serverurl}"
        resultFilePath="describeMetadata/describe.log"/>
    </target>

    <!-- Target for deploy in development sandboxes -->
    <target name="develop" depends="-initProps">
      <echo message="Deploying using usr=${personalPropsFile.sf.username} svrurl=${propfile.test.sf.serverurl}"/>
      <sf:deploy username="${personalPropsFile.sf.username}"
        password="${personalPropsFile.sf.password}"
        serverurl="${propfile.test.sf.serverurl}"
        testLevel="RunLocalTests"
        logType="Detail"
        deployRoot="src"/>
    </target>

    <!-- Deploy a zip of metadata files to the org uat-->
    <target name="UAT">
      <sf:deploy username="${propfile.uat.sf.username}" 
        password="${propfile.uat.sf.password}" 
        serverurl="${propfile.test.sf.serverurl}" 
        deployRoot="src" 
        testLevel="RunLocalTests"
        logType="Detail"        
        pollWaitMillis="1000"/>
    </target>

    <!-- Deploy a zip of metadata files to the org stage -->
    <target name="stage">
      <sf:deploy username="${propfile.stage.sf.username}" 
        password="${propfile.stage.sf.password}" 
        serverurl="${propfile.test.sf.serverurl}" 
        zipFile="${propfile.stage.sf.zip.package}" 
        testLevel="RunLocalTests"
        logType="Detail"        
        pollWaitMillis="1000"/>
    </target>  
    
    <!-- Shows deploying code & running tests for code in directory -->
    <target name="production">      
      <echo message="Deploying using usr=${personalPropsFile.sf.username} svrurl=${propfile.test.sf.serverurl} zipFile=${propfile.production.sf.zip.package}"/>
      <sf:deploy username="${propfile.production.sf.username}" 
        password="${propfile.production.sf.password}" 
        serverurl="${propfile.production.sf.serverurl}" 
        zipFile="deploy\\production\\install\\SFPACKAGEINSTALL.zip" 
        testLevel="RunLocalTests"
        logType="Detail"
        pollWaitMillis="1000">      	 
      </sf:deploy>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="checkOnly">
      <sf:deploy username="${propfile.production.sf.username}" 
        password="${propfile.production.sf.password}" 
        serverurl="${propfile.production.sf.serverurl}" 
        checkOnly="true"
        zipFile="${propfile.production.sf.zip.package}" 
        testLevel="RunLocalTests"
        logType="Detail"
        pollWaitMillis="1000">        
      </sf:deploy>      
    </target>

    <!-- Shows quick deployment of recent validation. -->
    <!-- Set the property sf.recentValidationId to your recent check only deployment Id -->
    <target name="quickDeploy" depends="-initProps">
      <sf:deployRecentValidation  
        username="${personalPropsFile.sf.username}" 
        password="${personalPropsFile.sf.password}"
        serverurl="${personalPropsFile.sf.serverurl}" 
        recentValidationId="${personalPropsFile.sf.recentValidationId}"/>
    </target>		 
	 
    <!-- Target for remove components -->
    <target name="rollback">            
      <sf:deploy username="${propfile.production.sf.username}" 
        password="${propfile.production.sf.password}" 
        serverurl="${propfile.production.sf.serverurl}" 
        zipFile="\\deploy\\production\\uninstall\\SFPACKAGEUNINSTALL.zip" 
        testLevel="RunLocalTests"
        purgeOnDelete ="true"
        logType="Detail">        
      </sf:deploy>
    </target>        
		
  	<!-- Shows cancel deployment of deploy request either pending or in progress. 
    Set property sf.requestId to Id of pending or in progress deploy request -->
  	<target name="cancelDeploy" depends="-initProps">
  	  <sf:cancelDeploy  
        username="${personalPropsFile.sf.username}" 
        password="${personalPropsFile.sf.password}" 
        serverurl="${personalPropsFile.sf.serverurl}" 
        requestId="${personalPropsFile.sf.requestId}"/>
  	</target>	

</project>
